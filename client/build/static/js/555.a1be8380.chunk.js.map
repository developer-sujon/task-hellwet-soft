{"version":3,"file":"static/js/555.a1be8380.chunk.js","mappings":"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","sources":["layout/PublicNav.jsx","layout/PublicLayout.jsx","screens/Register.jsx"],"sourcesContent":["//External Lib Import\r\nimport { Container, Navbar } from 'react-bootstrap';\r\nimport { AiOutlineMenuUnfold } from 'react-icons/ai';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//Internal Lib Import\r\nimport Logo from '../assets/images/logo.png';\r\n\r\nconst PublicNav = ({ title }) => {\r\n  return (\r\n    <>\r\n      <title>{title}</title>\r\n      <Navbar className=\"fixed-top px-0 shadow-sm \">\r\n        <Container fluid={true}>\r\n          <Navbar.Brand>\r\n            <button className=\"icon-nav m-0 h5 btn btn-link\">\r\n              <AiOutlineMenuUnfold />\r\n            </button>\r\n            <Link to=\"/\">\r\n              <img className=\"nav-logo mx-2\" src={Logo} alt=\"logo\" />\r\n            </Link>\r\n          </Navbar.Brand>\r\n        </Container>\r\n      </Navbar>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PublicNav;\r\n","//Internal Lib Import\r\nimport PublicNav from './PublicNav';\r\n\r\nconst PublicLayout = ({ children, title }) => {\r\n  return (\r\n    <>\r\n      <PublicNav title={title} />\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PublicLayout;\r\n","//External lib imports\nimport { useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Card, Col, Form, Row, Spinner } from 'react-bootstrap';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useTranslation } from 'react-i18next';\nimport * as yup from 'yup';\nimport { useSelector } from 'react-redux';\n\n//Internal lib imports\nimport { useRegisterMutation } from '../redux/services/authService';\nimport PublicLayout from '../layout/PublicLayout';\n\nconst Register = () => {\n  const navigate = useNavigate();\n  const [register, { isLoading, isSuccess }] = useRegisterMutation();\n  const { t } = useTranslation();\n  const { accessToken } = useSelector((state) => state.authReducer);\n\n  const {\n    control,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n    resolver: yupResolver(\n      yup.object({\n        name: yup.string().required(t('Name is required')),\n        email: yup.string().required(t('email number is required')).email(t('invalid email address')),\n        password: yup.string().required(t('Password is required.')).min(8, t('Password must be 8 digits long')),\n        confirmPassword: yup\n          .string()\n          .required(t('Confirm password is required'))\n          .oneOf([yup.ref('password'), null], t('Password and confirm password must match')),\n      })\n    ),\n  });\n\n  /*\n   * form handle submit\n   */\n  const submitForm = (values) => {\n    const { confirmPassword, ...others } = values;\n    register(others);\n  };\n\n  useEffect(() => {\n    if ((isSuccess, accessToken)) {\n      navigate('/login');\n    }\n  }, [isSuccess, accessToken]);\n\n  return (\n    <PublicLayout>\n      <div className=\"auth-wrapper pt-5 mt-5\">\n        <div className=\"auth-content\">\n          <div className=\"auth-wrapper\">\n            <div className=\"auth-content\">\n              <Row className=\"justify-content-center\">\n                <Col xl={8} className=\"center-screen\">\n                  <Card className=\"w-100\">\n                    <Card.Body>\n                      <h5>Sign Up</h5>\n                      <br />\n                      <Form onSubmit={handleSubmit(submitForm)} onReset={reset}>\n                        <Form.Group className=\"mb-3\" controlId=\"name\">\n                          <Form.Label>Name</Form.Label>\n                          <Controller\n                            control={control}\n                            name=\"name\"\n                            defaultValue=\"\"\n                            render={({ field: { onChange, onBlur, value, ref } }) => (\n                              <Form.Control\n                                onChange={onChange}\n                                value={value}\n                                ref={ref}\n                                isInvalid={errors.name}\n                                placeholder=\"Name\"\n                                type=\"name\"\n                              />\n                            )}\n                          />\n                          {errors.name && <Form.Text className=\"text-danger\">{errors.name.message}</Form.Text>}\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"email\">\n                          <Form.Label>Email</Form.Label>\n                          <Controller\n                            control={control}\n                            name=\"email\"\n                            defaultValue=\"\"\n                            render={({ field: { onChange, onBlur, value, ref } }) => (\n                              <Form.Control\n                                onChange={onChange}\n                                value={value}\n                                ref={ref}\n                                isInvalid={errors.email}\n                                placeholder=\"Email\"\n                                type=\"email\"\n                              />\n                            )}\n                          />\n                          {errors.email && <Form.Text className=\"text-danger\">{errors.email.message}</Form.Text>}\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"Password\">\n                          <Form.Label>Password</Form.Label>\n                          <Controller\n                            control={control}\n                            name=\"password\"\n                            defaultValue=\"\"\n                            render={({ field: { onChange, onBlur, value, ref } }) => (\n                              <Form.Control\n                                onChange={onChange}\n                                value={value}\n                                ref={ref}\n                                isInvalid={errors.password}\n                                placeholder=\"Password\"\n                                type=\"password\"\n                              />\n                            )}\n                          />\n                          {errors.password && <Form.Text className=\"text-danger\">{errors.password.message}</Form.Text>}\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"confirmPassword\">\n                          <Form.Label>Confirm Password</Form.Label>\n                          <Controller\n                            control={control}\n                            name=\"confirmPassword\"\n                            defaultValue=\"\"\n                            render={({ field: { onChange, onBlur, value, ref } }) => (\n                              <Form.Control\n                                onChange={onChange}\n                                value={value}\n                                ref={ref}\n                                isInvalid={errors.confirmPassword}\n                                placeholder=\"Confirm Password\"\n                                type=\"confirmPassword\"\n                              />\n                            )}\n                          />\n                          {errors.confirmPassword && (\n                            <Form.Text className=\"text-danger\">{errors.confirmPassword.message}</Form.Text>\n                          )}\n                        </Form.Group>\n\n                        <div className=\"d-grid\">\n                          <button className=\"btn btn-primary btn-block login-btn mt-2\" type=\"submit\">\n                            {isLoading ? <Spinner size=\"sm\" color=\"light\" /> : t('Sign up')}\n                          </button>\n                        </div>\n                      </Form>\n                      <div className=\"text-center w-100 mt-3\">\n                        <Link className=\"text-center\" to=\"/login\">\n                          Sign In\n                        </Link>\n                        <br />\n                        <Link className=\"text-center\" to=\"/forgot-password\">\n                          Forget Password\n                        </Link>\n                      </div>\n                    </Card.Body>\n                  </Card>\n                </Col>\n              </Row>\n            </div>\n          </div>\n        </div>\n      </div>\n    </PublicLayout>\n  );\n};\n\nexport default Register;\n"],"names":["_ref","title","_jsxs","_Fragment","children","_jsx","Navbar","className","Container","fluid","AiOutlineMenuUnfold","Link","to","src","Logo","alt","PublicNav","navigate","useNavigate","_useRegisterMutation","useRegisterMutation","_useRegisterMutation2","_slicedToArray","register","_useRegisterMutation3","isLoading","isSuccess","t","useTranslation","accessToken","useSelector","state","authReducer","_useForm","useForm","mode","defaultValues","name","email","password","resolver","yupResolver","yup","required","min","confirmPassword","oneOf","control","handleSubmit","reset","errors","formState","useEffect","PublicLayout","Row","Col","xl","Card","Form","onSubmit","values","others","_objectWithoutProperties","_excluded","onReset","controlId","Controller","defaultValue","render","_ref$field","field","onChange","value","onBlur","ref","isInvalid","placeholder","type","message","_ref2","_ref2$field","_ref3","_ref3$field","_ref4","_ref4$field","Spinner","size","color"],"sourceRoot":""}