{"version":3,"file":"static/js/451.2fca27ce.chunk.js","mappings":"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","sources":["redux/services/taskService.js","screens/private/Task/CreateUpdateTask.jsx"],"sourcesContent":["//Internal Lib Import\nimport { apiService } from './baseQuery';\nimport { dashboardService } from './dashboardService';\n\nexport const taskService = apiService.injectEndpoints({\n  endpoints: (builder) => ({\n    taskList: builder.query({\n      query: () => ({\n        url: 'task/taskList',\n        method: 'GET',\n      }),\n    }),\n    taskCreate: builder.mutation({\n      query: (postBody) => ({\n        url: 'task/taskCreate',\n        method: 'POST',\n        body: postBody,\n      }),\n      async onQueryStarted(_, { dispatch, queryFulfilled }) {\n        try {\n          const { data } = await queryFulfilled;\n          dispatch(\n            apiService.util.updateQueryData('taskList', undefined, (draft) => {\n              draft.data.push(data.data);\n            })\n          );\n          //dispatch(dashboardService.endpoints.dashboardSummary.initiate());\n        } catch {}\n      },\n    }),\n\n    taskUpdate: builder.mutation({\n      query: ({ id, postBody }) => ({\n        url: `task/taskUpdate/${id}`,\n        method: 'PATCH',\n        body: postBody,\n      }),\n\n      async onQueryStarted({ id, postBody }, { dispatch, queryFulfilled }) {\n        const patchTask = dispatch(\n          apiService.util.updateQueryData('taskList', undefined, (draft) => {\n            const findIndex = draft.data.findIndex((role) => role.id === id);\n            draft.data[findIndex].title = postBody.title;\n            draft.data[findIndex].status = postBody.status;\n            draft.data[findIndex].dueDate = postBody.dueDate;\n            draft.data[findIndex].descriptions = postBody.descriptions;\n          })\n        );\n\n        try {\n          await queryFulfilled;\n          //dispatch(dashboardService.endpoints.dashboardSummary.initiate());\n        } catch {\n          patchTask.undo();\n        }\n      },\n    }),\n    taskDelete: builder.mutation({\n      query: (id) => ({\n        url: `task/taskDelete/${id}`,\n        method: 'DELETE',\n      }),\n\n      async onQueryStarted(id, { dispatch, queryFulfilled }) {\n        const patchTask = dispatch(\n          apiService.util.updateQueryData('taskList', undefined, (draft) => {\n            draft.data = draft.data.filter((role) => role.id !== id);\n          })\n        );\n\n        try {\n          await queryFulfilled;\n        } catch {\n          patchTask.undo();\n        }\n      },\n    }),\n  }),\n});\n\nexport const { useTaskCreateMutation, useTaskListQuery, useTaskUpdateMutation, useTaskDeleteMutation } = taskService;\n","//External lib imports\nimport { Row, Col, Container, Button, Card, Form, Spinner } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\n\n//Internal lib imports\nimport Layout from '../../../layout/Layout';\nimport { useTaskCreateMutation, useTaskListQuery, useTaskUpdateMutation } from '../../../redux/services/taskService';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useLazyDashboardSummaryQuery } from '../../../redux/services/dashboardService';\n\nconst CreateUpdateTask = () => {\n  const [skip, setSkip] = useState(true);\n\n  let [objectID, SetObjectID] = useState(null);\n  const [details, setDetails] = useState({\n    title: '',\n    descriptions: '',\n    dueDate: '',\n    status: '',\n  });\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { data: allTask } = useTaskListQuery();\n  const [taskCreate, { isLoading: createLoading, isSuccess: createSuccess }] = useTaskCreateMutation();\n  const [TaskUpdate, { isLoading: updateLoading, isSuccess: updateSuccess }] = useTaskUpdateMutation();\n  const profileTrigger = useLazyDashboardSummaryQuery();\n  const [deshBoardTriggerFunc] = profileTrigger;\n\n  useEffect(() => {\n    let params = new URLSearchParams(window.location.search);\n    let id = params.get('id');\n    if (id !== null) {\n      SetObjectID(id);\n    }\n\n    if (objectID && allTask) {\n      setDetails(allTask?.data?.find((item) => item.id === objectID));\n    }\n  }, [objectID, allTask]);\n\n  const {\n    control,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: details,\n    resolver: yupResolver(\n      yup.object({\n        title: yup\n          .string()\n          .required(t('title is required'))\n          .min(3, t('title must be 3 characters long'))\n          .max(30, t('title maximum be 30 characters')),\n        descriptions: yup.string().required(t('descriptions is required')),\n        dueDate: yup.date(),\n        status: yup.string().required(t('status is required')),\n      })\n    ),\n  });\n\n  useEffect(() => {\n    if (details) {\n      reset(details);\n    }\n  }, [details]);\n\n  /*\n   * form handle submit\n   */\n  const submitForm = ({ title, descriptions, dueDate, status }) => {\n    const postBody = {\n      title,\n      descriptions,\n      dueDate,\n      status,\n    };\n    if (!objectID) {\n      taskCreate(postBody);\n    } else {\n      TaskUpdate({ id: objectID, postBody });\n    }\n  };\n\n  useEffect(() => {\n    if (createSuccess || updateSuccess) {\n      const response = async () => await deshBoardTriggerFunc();\n      response();\n      navigate('/task');\n    }\n  }, [createSuccess, updateSuccess, skip]);\n\n  return (\n    <Layout>\n      <Container>\n        <Card>\n          <Card.Body>\n            <Row>\n              <h5>{t(`${objectID ? 'Update Task' : 'Save Task'}`)}</h5>\n              <hr className=\"bg-light\" />\n              <Col>\n                <Form onSubmit={handleSubmit(submitForm)} onReset={reset}>\n                  <Row class>\n                    <Col sm={4}>\n                      <Form.Group className=\"mb-3\" controlId=\"title\">\n                        <Form.Label>{t('title')}</Form.Label>\n                        <Controller\n                          control={control}\n                          name=\"title\"\n                          defaultValue=\"\"\n                          render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <Form.Control\n                              onChange={onChange}\n                              value={value}\n                              ref={ref}\n                              isInvalid={errors.title}\n                              placeholder={t('title of the task')}\n                              type=\"text\"\n                              size=\"sm\"\n                            />\n                          )}\n                        />\n                        {errors.title && <Form.Text className=\"text-danger\">{errors.title.message}</Form.Text>}\n                      </Form.Group>\n                    </Col>\n                    <Col sm={4}>\n                      <Form.Group className=\"mb-3\" controlId=\"dueDate\">\n                        <Form.Label>{t('dueDate')}</Form.Label>\n                        <Controller\n                          control={control}\n                          name=\"dueDate\"\n                          defaultValue=\"\"\n                          render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <Form.Control\n                              onChange={onChange}\n                              value={value}\n                              ref={ref}\n                              isInvalid={errors.dueDate}\n                              placeholder={t('dueDate of the task')}\n                              type=\"date\"\n                              size=\"sm\"\n                            />\n                          )}\n                        />\n                        {errors.dueDate && <Form.Text className=\"text-danger\">{errors.dueDate.message}</Form.Text>}\n                      </Form.Group>\n                    </Col>\n                    <Col sm={4}>\n                      <Form.Group className=\"mb-3\" controlId=\"status\">\n                        <Form.Label>{t('status')}</Form.Label>\n                        <Controller\n                          control={control}\n                          name=\"status\"\n                          defaultValue=\"\"\n                          render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <Form.Select\n                              onChange={onChange}\n                              value={value}\n                              ref={ref}\n                              isInvalid={errors.status}\n                              placeholder={t('status of the agent')}\n                              type=\"text\"\n                              size=\"sm\"\n                            >\n                              <option value=\"\">{t('choice status')}</option>\n                              <option value=\"new\">{t('new')}</option>\n                              <option value=\"pending\">{t('pending')}</option>\n                              <option value=\"canceled\">{t('canceled')}</option>\n                              <option value=\"complete\">{t('complete')}</option>\n                            </Form.Select>\n                          )}\n                        />\n                        {errors.status && <Form.Text className=\"text-danger\">{errors.status.message}</Form.Text>}\n                      </Form.Group>\n                    </Col>\n                    <Col sm={12}>\n                      <Form.Group className=\"mb-3\" controlId=\"descriptions\">\n                        <Form.Label>{t('descriptions')}</Form.Label>\n                        <Controller\n                          control={control}\n                          name=\"descriptions\"\n                          defaultValue=\"\"\n                          render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <Form.Control\n                              onChange={onChange}\n                              value={value}\n                              ref={ref}\n                              isInvalid={errors.descriptions}\n                              placeholder={t('descriptions of the task')}\n                              type=\"text\"\n                              size=\"sm\"\n                              as={'textarea'}\n                            />\n                          )}\n                        />\n                        {errors.descriptions && <Form.Text className=\"text-danger\">{errors.descriptions.message}</Form.Text>}\n                      </Form.Group>\n                    </Col>\n                  </Row>\n\n                  <Row>\n                    <Col sm={4}>\n                      <Button size=\"sm\" className=\"mt-2\" type=\"submit\">\n                        {createLoading || updateLoading ? <Spinner size=\"sm\" color=\"light\" /> : t('save change')}\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </Col>\n            </Row>\n          </Card.Body>\n        </Card>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default CreateUpdateTask;\n"],"names":["taskService","apiService","endpoints","builder","taskList","query","url","method","taskCreate","mutation","postBody","body","onQueryStarted","_","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dispatch","queryFulfilled","_yield$queryFulfilled","data","wrap","_context","prev","next","sent","undefined","draft","push","t0","stop","taskUpdate","_ref2","id","concat","_ref3","_ref4","_callee2","patchTask","_context2","findIndex","role","title","status","dueDate","descriptions","undo","taskDelete","_ref5","_callee3","_context3","filter","useTaskCreateMutation","useTaskListQuery","useTaskUpdateMutation","useTaskDeleteMutation","_useState","useState","_useState2","_slicedToArray","skip","_useState3","_useState4","objectID","SetObjectID","_useState5","_useState6","details","setDetails","t","useTranslation","navigate","useNavigate","allTask","_useTaskCreateMutatio","_useTaskCreateMutatio2","_useTaskCreateMutatio3","createLoading","isLoading","createSuccess","isSuccess","_useTaskUpdateMutatio","_useTaskUpdateMutatio2","TaskUpdate","_useTaskUpdateMutatio3","updateLoading","updateSuccess","profileTrigger","useLazyDashboardSummaryQuery","deshBoardTriggerFunc","useEffect","_allTask$data","URLSearchParams","window","location","search","get","find","item","_useForm","useForm","mode","defaultValues","resolver","yupResolver","yup","required","min","max","control","handleSubmit","reset","errors","formState","response","abrupt","apply","arguments","_jsx","Layout","children","Container","Card","_jsxs","Row","className","Col","Form","onSubmit","onReset","class","sm","controlId","Controller","name","defaultValue","render","_ref3$field","field","onChange","value","onBlur","ref","isInvalid","placeholder","type","size","message","_ref4$field","_ref5$field","_ref6","_ref6$field","as","Button","Spinner","color"],"sourceRoot":""}