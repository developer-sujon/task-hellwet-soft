{"version":3,"file":"static/js/451.dde23f54.chunk.js","mappings":"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","sources":["screens/private/Task/CreateUpdateTask.jsx"],"sourcesContent":["//External lib imports\nimport { Row, Col, Container, Button, Card, Form, Spinner } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\n\n//Internal lib imports\nimport Layout from '../../../layout/Layout';\nimport { useTaskCreateMutation, useTaskListQuery, useTaskUpdateMutation } from '../../../redux/services/taskService';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useLazyDashboardSummaryQuery } from '../../../redux/services/dashboardService';\n\nconst CreateUpdateTask = () => {\n  const [skip, setSkip] = useState(true);\n\n  let [objectID, SetObjectID] = useState(null);\n  const [details, setDetails] = useState({\n    title: '',\n    descriptions: '',\n    dueDate: '',\n    status: '',\n  });\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { data: allTask } = useTaskListQuery();\n  const [taskCreate, { isLoading: createLoading, isSuccess: createSuccess }] = useTaskCreateMutation();\n  const [TaskUpdate, { isLoading: updateLoading, isSuccess: updateSuccess }] = useTaskUpdateMutation();\n  const profileTrigger = useLazyDashboardSummaryQuery();\n  const [deshBoardTriggerFunc] = profileTrigger;\n\n  useEffect(() => {\n    let params = new URLSearchParams(window.location.search);\n    let id = params.get('id');\n    if (id !== null) {\n      SetObjectID(id);\n    }\n\n    if (objectID && allTask) {\n      setDetails(allTask?.data?.find((item) => item.id === objectID));\n    }\n  }, [objectID, allTask]);\n\n  const {\n    control,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: details,\n    resolver: yupResolver(\n      yup.object({\n        title: yup\n          .string()\n          .required(t('title is required'))\n          .min(3, t('title must be 3 characters long'))\n          .max(30, t('title maximum be 30 characters')),\n        descriptions: yup.string().required(t('descriptions is required')),\n        dueDate: yup.date(),\n        status: yup.string().required(t('status is required')),\n      })\n    ),\n  });\n\n  useEffect(() => {\n    if (details) {\n      reset(details);\n    }\n  }, [details]);\n\n  /*\n   * form handle submit\n   */\n  const submitForm = ({ title, descriptions, dueDate, status }) => {\n    const postBody = {\n      title,\n      descriptions,\n      dueDate,\n      status,\n    };\n    if (!objectID) {\n      taskCreate(postBody);\n    } else {\n      TaskUpdate({ id: objectID, postBody });\n    }\n  };\n\n  useEffect(() => {\n    if (createSuccess || updateSuccess) {\n      const response = async () => await deshBoardTriggerFunc();\n      response();\n      navigate('/task');\n    }\n  }, [createSuccess, updateSuccess, skip]);\n\n  return (\n    <Layout>\n      <Container>\n        <Card>\n          <Card.Body>\n            <Row>\n              <h5>{t(`${objectID ? 'Update Task' : 'Save Task'}`)}</h5>\n              <hr className=\"bg-light\" />\n              <Col>\n                <Form onSubmit={handleSubmit(submitForm)} onReset={reset}>\n                  <Row class>\n                    <Col sm={4}>\n                      <Form.Group className=\"mb-3\" controlId=\"title\">\n                        <Form.Label>{t('title')}</Form.Label>\n                        <Controller\n                          control={control}\n                          name=\"title\"\n                          defaultValue=\"\"\n                          render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <Form.Control\n                              onChange={onChange}\n                              value={value}\n                              ref={ref}\n                              isInvalid={errors.title}\n                              placeholder={t('title of the task')}\n                              type=\"text\"\n                              size=\"sm\"\n                            />\n                          )}\n                        />\n                        {errors.title && <Form.Text className=\"text-danger\">{errors.title.message}</Form.Text>}\n                      </Form.Group>\n                    </Col>\n                    <Col sm={4}>\n                      <Form.Group className=\"mb-3\" controlId=\"dueDate\">\n                        <Form.Label>{t('dueDate')}</Form.Label>\n                        <Controller\n                          control={control}\n                          name=\"dueDate\"\n                          defaultValue=\"\"\n                          render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <Form.Control\n                              onChange={onChange}\n                              value={value}\n                              ref={ref}\n                              isInvalid={errors.dueDate}\n                              placeholder={t('dueDate of the task')}\n                              type=\"date\"\n                              size=\"sm\"\n                            />\n                          )}\n                        />\n                        {errors.dueDate && <Form.Text className=\"text-danger\">{errors.dueDate.message}</Form.Text>}\n                      </Form.Group>\n                    </Col>\n                    <Col sm={4}>\n                      <Form.Group className=\"mb-3\" controlId=\"status\">\n                        <Form.Label>{t('status')}</Form.Label>\n                        <Controller\n                          control={control}\n                          name=\"status\"\n                          defaultValue=\"\"\n                          render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <Form.Select\n                              onChange={onChange}\n                              value={value}\n                              ref={ref}\n                              isInvalid={errors.status}\n                              placeholder={t('status of the agent')}\n                              type=\"text\"\n                              size=\"sm\"\n                            >\n                              <option value=\"\">{t('choice status')}</option>\n                              <option value=\"new\">{t('new')}</option>\n                              <option value=\"pending\">{t('pending')}</option>\n                              <option value=\"canceled\">{t('canceled')}</option>\n                              <option value=\"complete\">{t('complete')}</option>\n                            </Form.Select>\n                          )}\n                        />\n                        {errors.status && <Form.Text className=\"text-danger\">{errors.status.message}</Form.Text>}\n                      </Form.Group>\n                    </Col>\n                    <Col sm={12}>\n                      <Form.Group className=\"mb-3\" controlId=\"descriptions\">\n                        <Form.Label>{t('descriptions')}</Form.Label>\n                        <Controller\n                          control={control}\n                          name=\"descriptions\"\n                          defaultValue=\"\"\n                          render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <Form.Control\n                              onChange={onChange}\n                              value={value}\n                              ref={ref}\n                              isInvalid={errors.descriptions}\n                              placeholder={t('descriptions of the task')}\n                              type=\"text\"\n                              size=\"sm\"\n                              as={'textarea'}\n                            />\n                          )}\n                        />\n                        {errors.descriptions && <Form.Text className=\"text-danger\">{errors.descriptions.message}</Form.Text>}\n                      </Form.Group>\n                    </Col>\n                  </Row>\n\n                  <Row>\n                    <Col sm={4}>\n                      <Button size=\"sm\" className=\"mt-2\" type=\"submit\">\n                        {createLoading || updateLoading ? <Spinner size=\"sm\" color=\"light\" /> : t('save change')}\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </Col>\n            </Row>\n          </Card.Body>\n        </Card>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default CreateUpdateTask;\n"],"names":["_useState","useState","_useState2","_slicedToArray","skip","_useState3","_useState4","objectID","SetObjectID","_useState5","title","descriptions","dueDate","status","_useState6","details","setDetails","t","useTranslation","navigate","useNavigate","allTask","useTaskListQuery","data","_useTaskCreateMutatio","useTaskCreateMutation","_useTaskCreateMutatio2","taskCreate","_useTaskCreateMutatio3","createLoading","isLoading","createSuccess","isSuccess","_useTaskUpdateMutatio","useTaskUpdateMutation","_useTaskUpdateMutatio2","TaskUpdate","_useTaskUpdateMutatio3","updateLoading","updateSuccess","profileTrigger","useLazyDashboardSummaryQuery","deshBoardTriggerFunc","useEffect","_allTask$data","id","URLSearchParams","window","location","search","get","find","item","_useForm","useForm","mode","defaultValues","resolver","yupResolver","yup","required","min","max","control","handleSubmit","reset","errors","formState","response","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","sent","stop","apply","arguments","_jsx","Layout","children","Container","Card","_jsxs","Row","concat","className","Col","Form","onSubmit","_ref","postBody","onReset","class","sm","controlId","Controller","name","defaultValue","render","_ref3","_ref3$field","field","onChange","value","onBlur","ref","isInvalid","placeholder","type","size","message","_ref4","_ref4$field","_ref5","_ref5$field","_ref6","_ref6$field","as","Button","Spinner","color"],"sourceRoot":""}