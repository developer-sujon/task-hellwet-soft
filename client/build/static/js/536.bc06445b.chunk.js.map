{"version":3,"file":"static/js/536.bc06445b.chunk.js","mappings":"2RAIAA,EAAAA,GAAAA,SAAiBC,EAAAA,GAAYC,EAAAA,EAASC,EAAAA,IAEtC,IAkBA,EAlBoB,SAAHC,GAA8B,IAAxBC,EAAgBD,EAAhBC,iBACbC,GAAMC,EAAAA,EAAAA,MAAND,EAEFE,EAAO,CACXC,QAAMC,EAAAA,EAAAA,GAAsB,OAAhBL,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBM,KAAI,SAACC,GAAC,OAAKN,EAAEM,EAAEC,IAAI,KACjDC,SAAU,CACR,CACEC,MAAOT,EAAE,mBACTE,MAAIE,EAAAA,EAAAA,GAAsB,OAAhBL,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBM,KAAI,SAACC,GAAC,OAAKA,EAAEI,KAAK,KAC9CC,gBAAiB,CAAC,UAAW,UAAW,UAAW,WACnDC,YAAa,CAAC,UAAW,UAAW,UAAW,WAC/CC,YAAa,KAInB,OAAOC,EAAAA,EAAAA,KAACC,EAAAA,GAAG,CAACb,KAAMA,GACpB,EC2DA,EAtEkB,WAChB,IAAAc,GAA4BC,EAAAA,EAAAA,MAApBf,EAAIc,EAAJd,KAAMgB,EAASF,EAATE,UAGRnB,IAFQE,EAAAA,EAAAA,MAAND,GAEqB,OAAJE,QAAI,IAAJA,OAAI,EAAJA,EAAMA,OAAQ,IAEnCiB,EAAU,GAuDd,OApDEA,EADED,GAEAJ,EAAAA,EAAAA,KAACM,EAAAA,EAAI,CAAAC,UACHP,EAAAA,EAAAA,KAACM,EAAAA,EAAAA,KAAS,CAAAC,UACRP,EAAAA,EAAAA,KAACQ,EAAAA,EAAG,CAACC,GAAI,EAAEF,UACTP,EAAAA,EAAAA,KAACU,EAAAA,EAAO,CAACC,KAAK,KAAKC,QAAQ,kBAK1B3B,GAAoBA,EAAiB4B,OAAS,GAErDb,EAAAA,EAAAA,KAAAc,EAAAA,SAAA,CAAAP,UACEP,EAAAA,EAAAA,KAACM,EAAAA,EAAI,CAAAC,UACHP,EAAAA,EAAAA,KAACM,EAAAA,EAAAA,KAAS,CAAAC,UACRP,EAAAA,EAAAA,KAACQ,EAAAA,EAAG,CAACC,GAAI,EAAEF,UACTP,EAAAA,EAAAA,KAACe,EAAW,CAAC9B,iBAAkBA,aAQvCe,EAAAA,EAAAA,KAACM,EAAAA,EAAI,CAAAC,UACHP,EAAAA,EAAAA,KAACM,EAAAA,EAAAA,KAAS,CAAAC,UACRP,EAAAA,EAAAA,KAACQ,EAAAA,EAAG,CAACC,GAAI,EAAEF,UACTP,EAAAA,EAAAA,KAACe,EAAW,CACV9B,iBAAkB,CAChB,CACEQ,IAAK,WACLG,MAAO,GAET,CACEH,IAAK,UACLG,MAAO,GAET,CACEH,IAAK,WACLG,MAAO,GAET,CACEH,IAAK,MACLG,MAAO,aAWrBI,EAAAA,EAAAA,KAACgB,EAAAA,EAAM,CAAAT,UACLP,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CAAAV,UACRP,EAAAA,EAAAA,KAACkB,EAAAA,EAAG,CAAAX,SAAEF,OAId,C","sources":["components/StatusChart.jsx","screens/private/Dashboard.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport { useTranslation } from 'react-i18next';\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst StatusChart = ({ dashboardSummary }) => {\r\n  const { t } = useTranslation();\r\n\r\n  const data = {\r\n    labels: [...dashboardSummary?.map((i) => t(i._id))],\r\n    datasets: [\r\n      {\r\n        label: t('status of count'),\r\n        data: [...dashboardSummary?.map((i) => i.count)],\r\n        backgroundColor: ['#82d616', '#21bf73', '#ea0606', '#17c1e8'],\r\n        borderColor: ['#82d616', '#21bf73', '#ea0606', '#17c1e8'],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n  return <Pie data={data} />;\r\n};\r\n\r\nexport default StatusChart;\r\n","//External lib imports\nimport React from 'react';\n\n//Internal lib imports\nimport Layout from '../../layout/Layout';\nimport { useDashboardSummaryQuery } from '../../redux/services/dashboardService';\nimport { Card, Col, Container, Row, Spinner } from 'react-bootstrap';\nimport { AiOutlineCalendar, AiOutlineDelete, AiOutlineEdit } from 'react-icons/ai';\nimport { useTranslation } from 'react-i18next';\nimport StatusChart from '../../components/StatusChart';\n\nconst Dashboard = () => {\n  const { data, isLoading } = useDashboardSummaryQuery();\n  const { t } = useTranslation();\n\n  const dashboardSummary = data?.data || [];\n\n  let content = '';\n\n  if (isLoading) {\n    content = (\n      <Card>\n        <Card.Body>\n          <Col sm={4}>\n            <Spinner size=\"lg\" variant=\"primary\" />\n          </Col>\n        </Card.Body>\n      </Card>\n    );\n  } else if (dashboardSummary && dashboardSummary.length > 0) {\n    content = (\n      <>\n        <Card>\n          <Card.Body>\n            <Col sm={4}>\n              <StatusChart dashboardSummary={dashboardSummary} />\n            </Col>\n          </Card.Body>\n        </Card>\n      </>\n    );\n  } else {\n    content = (\n      <Card>\n        <Card.Body>\n          <Col sm={4}>\n            <StatusChart\n              dashboardSummary={[\n                {\n                  _id: 'complete',\n                  count: 0,\n                },\n                {\n                  _id: 'pending',\n                  count: 0,\n                },\n                {\n                  _id: 'canceled',\n                  count: 0,\n                },\n                {\n                  _id: 'new',\n                  count: 0,\n                },\n              ]}\n            />\n          </Col>\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  return (\n    <Layout>\n      <Container>\n        <Row>{content}</Row>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default Dashboard;\n"],"names":["ChartJS","ArcElement","Tooltip","Legend","_ref","dashboardSummary","t","useTranslation","data","labels","_toConsumableArray","map","i","_id","datasets","label","count","backgroundColor","borderColor","borderWidth","_jsx","Pie","_useDashboardSummaryQ","useDashboardSummaryQuery","isLoading","content","Card","children","Col","sm","Spinner","size","variant","length","_Fragment","StatusChart","Layout","Container","Row"],"sourceRoot":""}